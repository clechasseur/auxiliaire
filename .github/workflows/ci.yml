name: CI

on:
  push:

env:
  CI: 1

jobs:
  clippy:
    name: Clippy validation${{ matrix.all-features && ' with all features' || '' }}
    strategy:
      fail-fast: false
      matrix:
        all-features: [ false ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust with clippy
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
        with:
          toolchain: stable
          components: clippy

      - name: Run clippy
        uses: clechasseur/rs-clippy-check@80bcfb7d14c9bb0415d025602b7fabcf9463becd # v3.0.4
        with:
          args: --workspace --all-targets ${{ matrix.all-features && '--all-features' || '' }} -- -D warnings

  fmt:
    name: Rustfmt check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust nightly with rustfmt
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
        with:
          toolchain: nightly
          components: rustfmt
          cache: false

      - name: Run Rustfmt
        uses: clechasseur/rs-fmt-check@1a4ebb722c8e8a04f0d2e363c91744f81c968c42 # v2.0.5
        with:
          args: --all

  msrv-check:
    name: MSRV check for Rust ${{ matrix.toolchain }} on ${{ matrix.os }}${{ matrix.all-features && ' with all features' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ 1.74.1 ]
        os: [ ubuntu, macos, windows ]
        all-features: [ false ]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust nightly toolchain
        if: ${{ matrix.toolchain != 'nightly' }}
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
        with:
          toolchain: nightly
          cache: false

      - name: Install Rust toolchain ${{ matrix.toolchain }}
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
        with:
          toolchain: ${{ matrix.toolchain }}
          cache: false

      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v6-rust
          key: all-features-${{ matrix.all-features }}-msrv-pins-files-${{ hashFiles('**/msrv-pins.toml') }}
          cache-on-failure: true

      - name: Install required tools
        uses: taiki-e/install-action@f52ff8a447b6036f9e59cd8f3aa5b8fc87c6908e # v2.33.11
        with:
          tool: just,cargo-hack,cargo-minimal-versions,cargo-msrv-prep

      - name: Run checks using cargo-minimal-versions
        run: just all_features=${{ matrix.all-features }} check-minimal

  build:
    name: Build for Rust ${{ matrix.toolchain }}${{ matrix.experimental && ' (experimental)' || '' }} on ${{ matrix.os }}${{ matrix.ignore-lock && ' without Cargo.lock' || '' }}${{ matrix.all-features && ' with all features' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ 1.75.0, stable, beta, nightly ]
        os: [ ubuntu, macos, windows ]
        ignore-lock: [ false, true ]
        all-features: [ false ]
        include:
          - experimental: false
          - toolchain: beta
            experimental: true
          - toolchain: nightly
            experimental: true
        exclude:
          - toolchain: 1.75.0
            ignore-lock: true
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Remove Cargo.lock
        if: ${{ matrix.ignore-lock }}
        run: rm Cargo.lock

      - name: Install Rust toolchain ${{ matrix.toolchain }}
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
        with:
          toolchain: ${{ matrix.toolchain }}
          cache: false

      - name: Rust Cache
        if: ${{ !matrix.experimental }}
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v2-rust
          key: ignore-lock-${{ matrix.ignore-lock }}-all-features-${{ matrix.all-features }}
          cache-on-failure: true

      - name: Install just
        uses: taiki-e/install-action@f52ff8a447b6036f9e59cd8f3aa5b8fc87c6908e # v2.33.11
        with:
          tool: just

      - name: Run checks
        run: just all_features=${{ matrix.all-features }} check

      - name: Run tests
        run: just all_features=${{ matrix.all-features }} test

  tarpaulin:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
        with:
          toolchain: stable
          cache: false

      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v2-rust
          cache-targets: false
          cache-on-failure: true

      - name: Install cargo-tarpaulin
        uses: taiki-e/install-action@f52ff8a447b6036f9e59cd8f3aa5b8fc87c6908e # v2.33.11
        with:
          tool: cargo-tarpaulin

      - name: Run cargo-tarpaulin
        uses: clechasseur/rs-cargo@b4ba96880c7600d3b7f6fc6d1b72d88417378320 # v2.0.4
        with:
          command: tarpaulin

      - name: Upload code coverage results to codecov.io
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Archive code coverage results
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: code-coverage-report
          path: |
            cobertura.xml
            tarpaulin-report.html

  doc:
    name: Rustdoc check for Rust ${{ matrix.toolchain }}${{ matrix.experimental && ' (experimental)' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ stable, nightly ]
        include:
          - experimental: false
          - toolchain: nightly
            experimental: true
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust toolchain ${{ matrix.toolchain }}
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
        with:
          toolchain: ${{ matrix.toolchain }}
          cache: false

      - name: Rust Cache
        if: ${{ !matrix.experimental }}
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v2-rust
          cache-targets: false
          cache-on-failure: true

      - name: Install just
        uses: taiki-e/install-action@f52ff8a447b6036f9e59cd8f3aa5b8fc87c6908e # v2.33.11
        with:
          tool: just

      - name: Generate doc using rustdoc
        run: just doc

  publish-dry-run:
    name: Publish dry-run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
        with:
          toolchain: stable
          cache: false

      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v2-rust
          cache-targets: false
          cache-on-failure: true

      - name: Perform publish dry-run
        uses: clechasseur/rs-cargo@b4ba96880c7600d3b7f6fc6d1b72d88417378320 # v2.0.4
        with:
          command: publish
          args: --dry-run
